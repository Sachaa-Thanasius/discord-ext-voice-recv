[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "discord-ext-voice_recv"
description = "Experimental voice receive extension for discord.py"
readme = { file = "README.md", content-type = "text/markdown" }
license = { file = "LICENSE" }
requires-python = ">=3.8"
authors = [{ name = "Imayhaveborkedit" }]
classifiers = [
    "Development Status :: 3 - Alpha",
    "License :: OSI Approved :: MIT License",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Operating System :: POSIX",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: MacOS",
    "Topic :: Multimedia :: Sound/Audio :: Capture/Recording",
]
dynamic = ["version", "dependencies"]

[project.urls]
Homepage = "https://github.com/imayhaveborkedit/discord-ext-voice-recv"
Issues = "https://github.com/imayhaveborkedit/discord-ext-voice-recv/issues"

[project.optional-dependencies]
extras = ["SpeechRecognition"]

[tool.setuptools.dynamic]
dependencies = { file = "requirements.txt" }

[tool.setuptools]
packages = ["discord.ext.voice_recv", "discord.ext.voice_recv.extras"]
include-package-data = true

[tool.ruff]
include = ["discord/ext/voice_recv/*"]
extend-exclude = ["examples"]
line-length = 125
target-version = "py38"

[tool.ruff.lint]
select = [
    "F",
    "E",
    "I",
    "UP",
    "YTT",
    "ANN",
    "S",
    "BLE",
    "B",
    "A",
    "COM",
    "C4",
    "DTZ",
    "EM",
    "ISC",
    "G",
    "INP",
    "PIE",
    "T20",
    "PYI",
    "RSE",
    "RET",
    "SIM",
    "TID",
    "PTH",
    "ERA",
    "PD",
    "PL",
    "TRY",
    "NPY",
    "RUF",
]
extend-ignore = [
    "S101",   # Use of assert here is a known quantity. Blame typing memes.
    "SIM105", # Suppressable exception. I'm not paying the overhead of contextlib.suppress for stylistic choices.
    "C90",    # McCabe complexity memes.
    "PD011",  # Erroneous issue that triggers for any .values attribute access at all.
    "S311",   # No need for cryptographically secure random number generation in this use case.
    "ANN101", # Type of self is implicit.
    "ANN102", # Type of cls is implicit.
    "ANN204", # Special method return types are known by type checker.
    "ANN401", # Not sure how else to type *args and **kwargs when they could be anything.
    "PLR",    # Complexity things.
    "PYI036", # Bug with annotations for __exit__.
    # Recommended by Ruff when using Ruff format.
    "E111",
    "E114",
    "E117",
    "Q003",
    "COM812",
    "COM819",
    "E501",
    "ISC001",
    "ISC002",
    # == Others to accomodate for existing codebase.
    "E731",   # Leave lambdas.
    "RUF002", # Leave certain unicode characters in docstrings.
    "BLE001", # Allow catching of blind exceptions
    "S110",   # Assume current try-except-pass patterns don't need logging.
    "PTH123", # Leave uses of open().
    "PYI024", # Leave normal namedtuples.
    # For messages in exception calls.
    "TRY003",
    "EM101",
    "EM102",
    # Leave simple if-else or if-elif blocks that return or assign.
    "SIM108",
    "RET505",
    # Shadowing of builtins.
    "A001",
    "A002",
]
unfixable = [
    "ERA", # I don't want anything erroneously detected deleted by this.
]
[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F403", "PLC0414"] # Star import usually throws these.

[tool.ruff.lint.isort]
combine-as-imports = true

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true

[tool.ruff.format]
quote-style = "preserve"

[tool.pyright]
include = ["discord/ext/voice_recv"]
ignore = ["examples"]
pythonVersion = "3.8"
typeCheckingMode = "strict"

reportPrivateUsage = "none"
reportMissingTypeStubs = "none"
reportUnnecessaryIsInstance = "information"
reportUntypedNamedTuple = "none"
reportUnnecessaryCast = "warning"
reportUnnecessaryTypeIgnoreComment = "warning"
reportImportCycles = "warning"
